<div class="container">
  <h2>Choose Your Subscription</h2>
  <div class="subscription-options">
    <div class="subscription-card">
      <h3>Service Search</h3>
      <p>₹100 for 365 days</p>
      <button onclick="makePayment('SERVICE_SEARCH', 100)">Subscribe Now</button>
    </div>
    <div class="subscription-card">
      <h3>Job Search</h3>
      <p>₹100 for 365 days</p>
      <button onclick="makePayment('JOB_SEARCH', 100)">Subscribe Now</button>
    </div>
    <div class="subscription-card">
      <h3>Service Post</h3>
      <p>₹500 for 365 days</p>
      <button onclick="makePayment('SERVICE_POST', 500)">Subscribe Now</button>
    </div>
  </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
// Get token from localStorage
const token = localStorage.getItem('token');
if (!token) {
  alert('Please login first');
  window.location.href = '/login';
}

function makePayment(subscriptionType, amount) {
  fetch('/api/payments/create-order', {  // Remove the token from URL
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify({ subscriptionType })
  })
  .then(response => response.json())
  .then(data => {
    if (data.status === 'success') {
      const options = {
        key: data.data.key,
        amount: data.data.amount,
        currency: data.data.currency,
        name: data.data.name,
        description: data.data.description,
        order_id: data.data.order.id,
        prefill: data.data.prefill,
        handler: function(response) {
          // Verify payment and create subscription
          fetch('/api/payments/verify-payment', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({
              razorpay_payment_id: response.razorpay_payment_id,
              razorpay_order_id: response.razorpay_order_id,
              razorpay_signature: response.razorpay_signature,
              subscriptionType: subscriptionType
            })
          })
          .then(res => res.json())
          .then(data => {
            if (data.status === 'success') {
              alert('Payment successful! Your subscription is now active.');
              window.location.href = '/dashboard'; // Redirect to dashboard
            } else {
              alert('Payment verification failed. Please contact support.');
            }
          })
          .catch(error => {
            console.error('Payment verification failed:', error);
            alert('Payment verification failed. Please try again.');
          });
        },
        modal: {
          ondismiss: function() {
            alert('Payment cancelled');
          }
        }
      };
      const rzp = new Razorpay(options);
      rzp.open();
    }
  })
  .catch(error => {
    console.error('Error creating order:', error);
    alert('Failed to initialize payment. Please try again.');
  });
}
</script>

<style>
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.subscription-options {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
  margin-top: 30px;
}

.subscription-card {
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 20px;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.subscription-card h3 {
  margin-bottom: 10px;
  color: #333;
}

.subscription-card p {
  margin-bottom: 20px;
  color: #666;
}

button {
  background-color: #4CAF50;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

button:hover {
  background-color: #45a049;
}
</style>